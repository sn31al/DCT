import numpy as np
from scipy.fftpack import dct


def psnrhma(img1, img2, wstep=8):
    # Input check
    if img1.shape != img2.shape:
        return -np.inf, -np.inf

    LenY, LenX = img1.shape
    CSFCof = np.array([
        [1.608443, 2.339554, 2.573509, 1.608443, 1.072295, 0.643377, 0.504610, 0.421887],
        [2.144591, 2.144591, 1.838221, 1.354478, 0.989811, 0.443708, 0.428918, 0.467911],
        [1.838221, 1.979622, 1.608443, 1.072295, 0.643377, 0.451493, 0.372972, 0.459555],
        [1.838221, 1.513829, 1.169777, 0.887417, 0.504610, 0.295806, 0.321689, 0.415082],
        [1.429727, 1.169777, 0.695543, 0.459555, 0.378457, 0.236102, 0.249855, 0.334222],
        [1.072295, 0.735288, 0.467911, 0.402111, 0.317717, 0.247453, 0.227744, 0.279729],
        [0.525206, 0.402111, 0.329937, 0.295806, 0.249855, 0.212687, 0.214459, 0.254803],
        [0.357432, 0.279729, 0.270896, 0.262603, 0.229778, 0.257351, 0.249855, 0.259950]
    ])

    MaskCof = np.array([
        [0.390625, 0.826446, 1.000000, 0.390625, 0.173611, 0.062500, 0.038447, 0.026874],
        [0.694444, 0.694444, 0.510204, 0.277008, 0.147929, 0.029727, 0.027778, 0.033058],
        [0.510204, 0.591716, 0.390625, 0.173611, 0.062500, 0.030779, 0.021004, 0.031888],
        [0.510204, 0.346021, 0.206612, 0.118906, 0.038447, 0.013212, 0.015625, 0.026015],
        [0.308642, 0.206612, 0.073046, 0.031888, 0.021626, 0.008417, 0.009426, 0.016866],
        [0.173611, 0.081633, 0.033058, 0.024414, 0.015242, 0.009246, 0.007831, 0.011815],
        [0.041649, 0.024414, 0.016437, 0.013212, 0.009426, 0.006830, 0.006944, 0.009803],
        [0.019290, 0.011815, 0.011080, 0.010412, 0.007972, 0.010000, 0.009426, 0.010203]
    ])

    delt = (np.sum(img1.astype(np.float64)) - np.sum(img2.astype(np.float64))) / img1.size
    img2m = img2.astype(np.float64) + delt

    mean1 = np.mean(img1)
    mean2 = np.mean(img2m)
    tmp = (img1 - mean1) * (img2m - mean2)
    sq = np.var(img2m, ddof=0)
    l = np.sum(tmp) / tmp.size / sq

    KofContr = 0.25 if l >= 1 else 0.002
    img3m = mean2 + (img2m - mean2) * l
    S3 = (np.sum((img2m - img1) ** 2) - np.sum((img3m - img1) ** 2)) / img1.size

    S1 = 0
    S2 = 0
    Num = 0
    SS1 = 0
    SS2 = 0
    Y = 0
    X = 0

    while Y <= LenY - 7:
        while X <= LenX - 7:
            A = img1[Y:Y + 8, X:X + 8]
            B = img2m[Y:Y + 8, X:X + 8]
            B2 = img3m[Y:Y + 8, X:X + 8]
            A_dct = dct(dct(A.T, norm='ortho').T, norm='ortho')
            B_dct = dct(dct(B.T, norm='ortho').T, norm='ortho')
            B_dct2 = dct(dct(B2.T, norm='ortho').T, norm='ortho')

            MaskA = maskeff(A, A_dct)
            MaskB = maskeff(B, B_dct)
            MaskA = max(MaskA, MaskB)

            X += wstep

            for k in range(8):
                for l in range(8):
                    u = abs(A_dct[k, l] - B_dct[k, l])
                    u2 = abs(A_dct[k, l] - B_dct2[k, l])
                    S2 += (u * CSFCof[k, l]) ** 2
                    SS2 += (u2 * CSFCof[k, l]) ** 2

                    if (k != 0 or l != 0):
                        u = max(0, u - MaskA / MaskCof[k, l])
                        u2 = max(0, u2 - MaskA / MaskCof[k, l])

                    S1 += (u * CSFCof[k, l]) ** 2
                    SS1 += (u2 * CSFCof[k, l]) ** 2
                    Num += 1

        X = 0
        Y += wstep

    if Num != 0:
        S1 /= Num
        S2 /= Num
        SS1 /= Num
        SS2 /= Num
        delt **= 2

        if S1 > SS1:
            S1 = SS1 + (S1 - SS1) * KofContr
        S1 += 0.04 * delt

        if S2 > SS2:
            S2 = SS2 + (S2 - SS2) * KofContr
        S2 += 0.04 * delt

        p_hvs_m = 100000 if S1 == 0 else 10 * np.log10(255 * 255 / S1)
        p_hvs = 100000 if S2 == 0 else 10 * np.log10(255 * 255 / S2)

        return p_hvs_m, p_hvs

    return -np.inf, -np.inf


def maskeff(z, zdct):
    MaskCof = np.array([
        [0.390625, 0.826446, 1.000000, 0.390625, 0.173611, 0.062500, 0.038447, 0.026874],
        [0.694444, 0.694444, 0.510204, 0.277008, 0.147929, 0.029727, 0.027778, 0.033058],
        [0.510204, 0.591716, 0.390625, 0.173611, 0.062500, 0.030779, 0.021004, 0.031888],
        [0.510204, 0.346021, 0.206612, 0.118906, 0.038447, 0.013212, 0.015625, 0.026015],
        [0.308642, 0.206612, 0.073046, 0.031888, 0.021626, 0.008417, 0.009426, 0.016866],
        [0.173611, 0.081633, 0.033058, 0.024414, 0.015242, 0.009246, 0.007831, 0.011815],
        [0.041649, 0.024414, 0.016437, 0.013212, 0.009426, 0.006830, 0.006944, 0.009803],
        [0.019290, 0.011815, 0.011080, 0.010412, 0.007972, 0.010000, 0.009426, 0.010203]
    ])
    mf = 0
    Num = 0

    for u in range(8):
        for v in range(8):
            if u != 0 or v != 0:
                mf += (zdct[u, v] * MaskCof[u, v]) ** 2
                Num += 1

    mf /= Num

    if mf != 0:
        mf = np.sqrt(mf)

    return mf
